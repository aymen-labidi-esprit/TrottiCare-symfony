{# templates/admin/events.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Gestion des Événements - Admin{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    {# Ensure Tailwind base styles are loaded via base.html.twig #}
    {# FontAwesome for icons (ensure it's loaded in base.html.twig or add CDN link) #}
    <style>
        /* --- Reusable Styles (adapt from other admin pages) --- */

        /* Status Badge Styles */
        .status-badge { padding: 0.25em 0.6em; border-radius: 9999px; font-size: 0.7rem; font-weight: 500; text-transform: uppercase; letter-spacing: 0.05em; white-space: nowrap; line-height: 1; display: inline-block;}
        .status-a_venir { background-color: #dbeafe; color: #1e40af; } /* blue-100 / blue-800 */
        .status-en_cours { background-color: #dcfce7; color: #166534; } /* green-100 / green-800 */
        .status-termine { background-color: #f3f4f6; color: #374151; } /* gray-100 / gray-700 */
        .status-annule { background-color: #fee2e2; color: #991b1b; } /* red-100 / red-800 */
        .status-unknown { background-color: #e5e7eb; color: #4b5563; } /* gray-200 / gray-600 */

        /* Form Input/Select Styles */
        .form-input, .form-select {
            appearance: none; display: block; width: 100%;
            padding: 0.5rem 0.75rem; font-size: 0.875rem; line-height: 1.5;
            color: #1f2937; background-color: #fff; background-clip: padding-box;
            border: 1px solid #d1d5db; border-radius: 0.375rem; /* rounded-md */
            transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
        }
        .form-select {
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 0.5rem center; background-repeat: no-repeat;
            background-size: 1.5em 1.5em; padding-right: 2.5rem;
        }
        .form-input:focus, .form-select:focus {
            outline: none; border-color: #3b82f6; /* focus:border-blue-500 */
            box-shadow: 0 0 0 1px #3b82f6; /* focus:ring-1 focus:ring-blue-500 */
        }
        .filter-form .form-input, .filter-form .form-select {
            height: 2.25rem; /* h-9 */ font-size: 0.875rem; /* text-sm */
            padding-top: 0.375rem; padding-bottom: 0.375rem;
        }

        /* Button Styles */
        .button { display: inline-flex; align-items: center; justify-content: center; padding: 0.5rem 1rem; border-radius: 0.375rem; font-weight: 500; text-align: center; cursor: pointer; transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out, color 0.2s ease-in-out; border: 1px solid transparent; line-height: 1.25; font-size: 0.875rem; white-space: nowrap; }
        .button-sm { padding: 0.375rem 0.75rem; font-size: 0.75rem; }
        .button-primary { background-color: #3b82f6; color: white; border-color: #3b82f6; } .button-primary:hover { background-color: #2563eb; border-color: #1d4ed8;}
        .button-secondary { background-color: #e5e7eb; color: #374151; border-color: #d1d5db; } .button-secondary:hover { background-color: #d1d5db; border-color: #9ca3af;}
        .button-success { background-color: #10b981; color: white; border-color: #10b981; } .button-success:hover { background-color: #059669; border-color: #047857; }
        .button-info { background-color: #0ea5e9; color: white; border-color: #0ea5e9; } .button-info:hover { background-color: #0284c7; border-color: #0369a1; }
        .button-warning { background-color: #f59e0b; color: white; border-color: #f59e0b; } .button-warning:hover { background-color: #d97706; border-color: #b45309; }
        .button-danger { background-color: #ef4444; color: white; border-color: #ef4444; } .button-danger:hover { background-color: #dc2626; border-color: #b91c1c; }
        .button:disabled { opacity: 0.6; cursor: not-allowed; }

        /* FontAwesome Icons */
        .fas { display: inline-block; font-style: normal; font-variant: normal; text-rendering: auto; -webkit-font-smoothing: antialiased; font-family: "Font Awesome 6 Free"; font-weight: 900; }
        .fa-calendar-alt:before { content: "\f073"; } .fa-plus:before { content: "\2b"; }
        .fa-filter:before { content: "\f0b0"; } .fa-sync-alt:before { content: "\f2f1"; }
        .fa-eye:before { content: "\f06e"; } .fa-edit:before { content: "\f044"; }
        .fa-ban:before { content: "\f05e"; } .fa-spinner:before { content: "\f110"; }
        .fa-sort:before { content: "\f0dc"; } .fa-sort-up:before { content: "\f0de"; }
        .fa-sort-down:before { content: "\f0dd"; } .fa-spin { animation: fa-spin 1s infinite linear; }
        @keyframes fa-spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        .mr-1 { margin-right: 0.25rem; } .mr-1\.5 { margin-right: 0.375rem; } .mr-2 { margin-right: 0.5rem; }

        /* KNP Sortable Link Styles */
        th a.sortable { color: #4b5563; text-decoration: none; display: inline-flex; align-items: center; gap: 0.25rem; white-space: nowrap; }
        th a.sortable:hover { color: #1f2937; }
        th a.sortable .fas { color: #9ca3af; font-size: 0.8em; }
        th a.sortable.asc .fa-sort-up, th a.sortable.desc .fa-sort-down { color: #3b82f6; }
        th a.sortable .fa-sort { color: #9ca3af; }

        /* Pagination Container Styles */
        .pagination-container { display: flex; flex-wrap: wrap; justify-content: space-between; align-items: center; margin-top: 1.5rem; padding-top: 1rem; border-top: 1px solid #e5e7eb; }
        .pagination-controls { display: flex; align-items: center; gap: 0.75rem; font-size: 0.875rem; color: #4b5563; margin-top: 0.5rem; }
        .pagination-controls label { margin-bottom: 0; white-space: nowrap; margin-right: 0.25rem; }
        .limit-select { padding: 0.25rem 1.75rem 0.25rem 0.5rem; font-size: 0.875rem; line-height: 1.25; height: auto; min-width: 4.5rem; background-size: 1.2em 1.2em; background-position: right 0.3rem center; border-radius: 0.375rem; border: 1px solid #d1d5db; }
        /* --- End Reusable Styles --- */
    </style>
{% endblock %}

{% block body %}
    <div class="min-h-screen bg-gray-100 p-4 md:p-6 lg:p-8">
        <div class="container mx-auto max-w-7xl">

            {# 1. Header Section #}
            <div class="flex flex-col sm:flex-row justify-between items-center mb-8 gap-4">
                <h1 class="text-2xl lg:text-3xl font-bold text-gray-900 flex items-center gap-2">
                    <i class="fas fa-calendar-alt text-indigo-600"></i> {# Example color #}
                    Gestion des Événements
                </h1>
                <a href="{{ path('app_admin_event_new') }}" class="button button-success">
                    <i class="fas fa-plus mr-1.5"></i> Nouvel Événement
                </a>
            </div>

            {# 2. Status Cards #}
            <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
                {# À venir Card #}
                <div class="bg-white rounded-lg shadow-md border border-gray-200 p-5 flex items-center gap-4">
                    <div class="flex-shrink-0 rounded-full p-3 bg-blue-100 text-blue-600"> <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" /></svg> </div>
                    <div>
                        <div class="text-sm text-gray-500 uppercase tracking-wider">À Venir</div>
                        <div class="text-2xl font-bold text-gray-900">{{ countAVenir|default(0) }}</div>
                    </div>
                </div>
                {# En cours Card #}
                <div class="bg-white rounded-lg shadow-md border border-gray-200 p-5 flex items-center gap-4">
                    <div class="flex-shrink-0 rounded-full p-3 bg-green-100 text-green-600"> <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M14.752 11.168l-3.197-2.132A1 1 0 0010 9.87v4.263a1 1 0 001.555.832l3.197-2.132a1 1 0 000-1.664z" /><path stroke-linecap="round" stroke-linejoin="round" d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" /></svg> </div>
                    <div>
                        <div class="text-sm text-gray-500 uppercase tracking-wider">En Cours</div>
                        <div class="text-2xl font-bold text-gray-900">{{ countEnCours|default(0) }}</div>
                    </div>
                </div>
                {# Terminé Card #}
                <div class="bg-white rounded-lg shadow-md border border-gray-200 p-5 flex items-center gap-4">
                    <div class="flex-shrink-0 rounded-full p-3 bg-gray-100 text-gray-600"> <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg> </div>
                    <div>
                        <div class="text-sm text-gray-500 uppercase tracking-wider">Terminés</div>
                        <div class="text-2xl font-bold text-gray-900">{{ countTermine|default(0) }}</div>
                    </div>
                </div>
                {# Annulé Card #}
                <div class="bg-white rounded-lg shadow-md border border-gray-200 p-5 flex items-center gap-4">
                    <div class="flex-shrink-0 rounded-full p-3 bg-red-100 text-red-600"> <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728A9 9 0 015.636 5.636m12.728 12.728L5.636 5.636" /></svg> </div>
                    <div>
                        <div class="text-sm text-gray-500 uppercase tracking-wider">Annulés</div>
                        <div class="text-2xl font-bold text-gray-900">{{ countAnnule|default(0) }}</div>
                    </div>
                </div>
            </div>

            {# 3. Flash Messages #}
            {% include 'partials/_flash_messages.html.twig' ignore missing %}

            {# 4. Filter Form Card #}
            <div class="bg-white rounded-lg shadow p-4 mb-6">
                {{ form_start(filterForm, {'attr': {'class': 'grid grid-cols-1 sm:grid-cols-2 md:grid-cols-4 lg:grid-cols-5 gap-4 items-end filter-form'}}) }}
                <div class="sm:col-span-2 md:col-span-2 lg:col-span-2">
                    <label for="{{ filterForm.search.vars.id }}" class="sr-only">Rechercher</label>
                    {{ form_widget(filterForm.search) }}
                    {{ form_errors(filterForm.search) }}
                </div>
                <div>
                    <label for="{{ filterForm.status.vars.id }}" class="sr-only">Statut</label>
                    {{ form_widget(filterForm.status) }}
                    {{ form_errors(filterForm.status) }}
                </div>
                <div>
                    <label for="{{ filterForm.date_filter.vars.id }}" class="sr-only">Période</label>
                    {{ form_widget(filterForm.date_filter) }}
                    {{ form_errors(filterForm.date_filter) }}
                </div>
                {# Optional Gouvernorat Filter
                    <div>
                        <label for="{{ filterForm.state.vars.id }}" class="sr-only">Gouvernorat</label>
                        {{ form_widget(filterForm.state) }}
                        {{ form_errors(filterForm.state) }}
                    </div>
                #}
                <div class="flex gap-2">
                    <button type="submit" class="button button-primary button-sm flex-grow">
                        <i class="fas fa-filter mr-1"></i>Filtrer
                    </button>
                    <a href="{{ path('app_admin_events') }}" class="button button-secondary button-sm flex-grow" title="Réinitialiser">
                        <i class="fas fa-sync-alt mr-1"></i>Réinitialiser
                    </a>
                </div>
                {{ form_end(filterForm) }}
            </div>

            {# 5. Events Table Card #}
            <div class="bg-white shadow-md overflow-hidden sm:rounded-lg border border-gray-200">
                <div class="overflow-x-auto">
                    <table class="min-w-full divide-y divide-gray-200">
                        <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                {{ knp_pagination_sortable(pagination, 'Titre', 'e.titre') }}
                            </th>
                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                {{ knp_pagination_sortable(pagination, 'Date début', 'e.dateDebut') }}
                            </th>

                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                {{ knp_pagination_sortable(pagination, 'trottinette Min Autonomie', 'e.trottinetteMinAutonomie') }}
                            </th>
                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                {{ knp_pagination_sortable(pagination, 'Lieu (Gouvernorat)', 'e.state') }}
                            </th>
                            <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                {{ knp_pagination_sortable(pagination, 'Statut', 'e.statut') }}
                            </th>
                            <th scope="col" class="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider">
                                {# Cannot easily sort by count with current setup #}
                                Participants
                            </th>
                            <th scope="col" class="relative px-4 py-3"> <span class="sr-only">Actions</span> </th>
                        </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                        {# --- CORRECTED LOOP & COUNT ACCESS --- #}
                        {% for event in pagination %} {# Loop directly over Event objects #}
                            <tr id="event-row-{{ event.id }}" class="hover:bg-gray-50">
                                <td class="px-4 py-4 whitespace-nowrap">
                                    <div class="text-sm font-medium text-gray-900">{{ event.titre }}</div>
                                    {# Optional: Add truncated description #}
                                    {# <div class="text-xs text-gray-500 truncate w-64" title="{{ event.description }}">{{ event.description }}</div> #}
                                </td>
                                <td class="px-4 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-900">{{ event.dateDebut ? event.dateDebut|date('d/m/Y H:i') : '-' }}</div>
                                </td>
                                <td class="px-4 py-4 whitespace-nowrap">
                                    <div class="text-sm text-gray-700">{{ event.state ? event.state.label : '-' }}</div>
                                </td>
                                <td class="px-4 py-4 whitespace-nowrap">
                                    {% include 'admin/event/_status_badge.html.twig' with {'status': event.statut} %}
                                </td>
                                <td class="px-4 py-4 whitespace-nowrap text-sm text-center">
                                    <a href="{{ path('app_admin_event_participants', {id: event.id}) }}" class="text-blue-600 hover:text-blue-800 hover:underline font-medium">
                                        {{ event.participations.count }} {# Get count from relation #}
                                    </a>
                                </td>
                                <td class="px-4 py-4 whitespace-nowrap text-right text-sm font-medium space-x-1">
                                    <a href="{{ path('app_admin_event_show', {id: event.id}) }}" class="button button-sm button-info text-white" title="Voir"> <i class="fas fa-eye"></i> </a>
                                    <a href="{{ path('app_admin_event_edit', {id: event.id}) }}" class="button button-sm button-warning text-white" title="Modifier"> <i class="fas fa-edit"></i> </a>
                                    {% if event.statut not in ['TERMINE', 'ANNULE'] %}
                                        <form action="{{ path('app_admin_event_delete', {id: event.id}) }}" method="post" class="inline-block form-delete-event" data-event-id="{{ event.id }}">
                                            <input type="hidden" name="_token" value="{{ csrf_token('delete_admin_' ~ event.id) }}">
                                            <button type="submit" class="button button-sm button-danger" title="Annuler l'événement"> <i class="fas fa-ban"></i> </button>
                                        </form>
                                    {% endif %}
                                </td>
                            </tr>
                        {% else %}
                            <tr>
                                <td colspan="6" class="px-6 py-12 text-center text-sm text-gray-500">
                                    {# ... No results message ... #}
                                    Aucun événement trouvé {% if filterForm.vars.value.search is not empty or filterForm.vars.value.status is not empty or filterForm.vars.value.date_filter is not empty %} correspondant aux critères actuels{% endif %}.
                                    {% if filterForm.vars.value.search is not empty or filterForm.vars.value.status is not empty or filterForm.vars.value.date_filter is not empty %}
                                        <a href="{{ path('app_admin_events') }}" class="text-blue-600 hover:underline ml-2">Voir tous</a>
                                    {% endif %}
                                </td>
                            </tr>
                        {% endfor %}
                        {# --- END CORRECTED LOOP --- #}
                        </tbody>
                    </table>
                </div> {# End Table Wrapper #}
            </div> {# End Table Card #}

            {# 6. Pagination Container #}
            {% if pagination is defined and pagination.getTotalItemCount > 0 %}
                <div class="pagination-container">
                    <div> {# Links #}
                        {% if pagination.pageCount > 1 %}
                            {{ knp_pagination_render(pagination) }} {# Uses Tailwind template #}
                        {% endif %}
                    </div>
                    <div class="pagination-controls"> {# Summary & Limit #}
                        <span> {# Item count #}
                            {% set totalItems = pagination.getTotalItemCount|default(0) %}
                            {% if totalItems > 0 %}
                                {% set firstItem = (pagination.getCurrentPageNumber() - 1) * pagination.getItemNumberPerPage() + 1 %}
                                {% set lastItem = firstItem + pagination.count() - 1 %} {# Use count() method #}
                                Affichage de {{ firstItem }} à {{ lastItem }} sur {{ totalItems }}
                            {% endif %}
                         </span>
                        <div class="inline-flex items-center"> {# Limit Selector #}
                            <label for="itemsPerPageSelect" class="whitespace-nowrap">par page:</label>
                            <select id="itemsPerPageSelect" class="form-select limit-select">
                                {% for limitOption in allowedLimits %}
                                    <option value="{{ limitOption }}" {{ limitOption == currentLimit ? 'selected' : '' }}>
                                        {{ limitOption }}
                                    </option>
                                {% endfor %}
                            </select>
                        </div>
                    </div>
                </div>
            {% endif %} {# End Pagination Section #}

        </div> {# End container #}
    </div> {# End page wrapper #}
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    {# Limit Selector JS #}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const selectElement = document.getElementById('itemsPerPageSelect');
            if (selectElement) { /* ... Limit JS ... */ }

            // --- AJAX Form Submission for Cancel (Delete Button) ---
            const handleAdminFormSubmit = async (form, confirmMessage) => {
                if (confirmMessage && !confirm(confirmMessage)) return;
                const submitButton = form.querySelector('button[type="submit"]');
                const originalButtonHtml = submitButton ? submitButton.innerHTML : '';
                if (submitButton) { submitButton.disabled = true; submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i>'; }

                try {
                    const response = await fetch(form.action, {
                        method: form.method,
                        headers: { 'X-Requested-With': 'XMLHttpRequest', 'Accept': 'application/json' },
                        body: new FormData(form)
                    });
                    const contentType = response.headers.get("content-type");
                    if (contentType && contentType.includes("application/json")) {
                        const result = await response.json();
                        if (response.ok && result.success) {
                            console.log('Action successful:', result.message);
                            // Option 1: Reload page (simplest)
                            // window.location.reload();

                            // Option 2: Update UI dynamically (more complex)
                            const eventRow = form.closest('tr');
                            if (eventRow) {
                                // Find the status badge cell and update it
                                const statusCell = eventRow.querySelector('.event-status-cell');
                                if (statusCell) {
                                    // Re-render the badge using the new status (crude example)
                                    statusCell.innerHTML = `<span class="status-badge status-${result.newStatut|lower}">${result.newStatut.replace('_',' ')}</span>`;
                                }
                                // Remove the cancel button itself
                                form.remove();
                            }
                            // Show a success notification (e.g., using a toast library or simple alert)
                            alert(result.message); // Replace with better notification

                        } else {
                            console.error('Action failed:', result.error || result.message);
                            alert(`Erreur: ${result.error || result.message || 'Action échouée.'}`);
                        }
                    } else {
                        console.error('Non-JSON response:', await response.text());
                        alert('Une erreur inattendue est survenue.');
                    }
                } catch (error) {
                    console.error('Fetch error:', error);
                    alert('Une erreur réseau est survenue.');
                } finally {
                    if (submitButton) { // Re-enable button only on error if UI isn't reloaded
                        if (!response.ok || !result.success) {
                            submitButton.disabled = false;
                            submitButton.innerHTML = originalButtonHtml;
                        }
                    }
                }
            };

            document.body.addEventListener('submit', function(e) {
                if (e.target && e.target.classList.contains('form-delete-event')) {
                    e.preventDefault();
                    handleAdminFormSubmit(e.target, 'Êtes-vous sûr de vouloir annuler cet événement ?');
                }
            });
        });
    </script>
{% endblock %}