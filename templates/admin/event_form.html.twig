{# templates/admin/event_form.html.twig #}
{% extends 'base.html.twig' %}

{# Use dynamic title passed from controller #}
{% block title %}{{ page_title|default('Gestion Événement') }} - Admin{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    {# Add basic form styling if not covered by base or Tailwind #}
    <style>
        /* Reuse button styles from index page if needed */
        .button { display: inline-block; padding: 0.5rem 1rem; border-radius: 0.375rem; font-weight: 500; text-align: center; cursor: pointer; transition: all 0.2s ease-in-out; border: 1px solid transparent; line-height: 1.25; font-size: 0.875rem; }
        .button-sm { padding: 0.375rem 0.75rem; font-size: 0.75rem; }
        .button-secondary { background-color: #e5e7eb; color: #374151; border-color: #d1d5db; } .button-secondary:hover { background-color: #d1d5db; border-color: #9ca3af;}
        .button-success { background-color: #10b981; color: white; border-color: #10b981; } .button-success:hover { background-color: #059669; border-color: #047857; }
        .button-ai { background-color: #8b5cf6; color: white; border-color: #8b5cf6; } /* Purple example */
        .button-ai:hover { background-color: #7c3aed; border-color: #6d28d9;}
        .button:disabled { opacity: 0.6; cursor: not-allowed; }

        /* Basic form row styling */
        .form-control, .form-select, textarea { display: block; width: 100%; padding: 0.5rem 0.75rem; font-size: 0.875rem; line-height: 1.5; color: #1f2937; background-color: #fff; background-clip: padding-box; border: 1px solid #d1d5db; border-radius: 0.375rem; transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out; }
        .form-select { appearance: none; background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e"); background-position: right 0.5rem center; background-repeat: no-repeat; background-size: 1.5em 1.5em; padding-right: 2.5rem; }
        label { display: inline-block; margin-bottom: 0.5rem; font-weight: 500; }
        .mb-3 { margin-bottom: 1rem !important; }
        .mt-6 { margin-top: 1.5rem !important; }
        .mr-2 { margin-right: 0.5rem !important; }
        .flex { display: flex !important; }
        .justify-between { justify-content: space-between !important; }
        .items-center { align-items: center !important; }
        .gap-2 > *:not(:last-child) { margin-right: 0.5rem; }

        /* Add FontAwesome icons for buttons if not global */
        .fas { display: inline-block; font-style: normal; font-variant: normal; text-rendering: auto; -webkit-font-smoothing: antialiased; font-family: "Font Awesome 6 Free"; font-weight: 900; }
        .fa-arrow-left:before { content: "\f060"; }
        .fa-save:before { content: "\f0c7"; }
        .fa-robot:before { content: "\f544"; } /* AI icon */
        .fa-spin { animation: fa-spin 1s infinite linear; }
        @keyframes fa-spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
    </style>
{% endblock %}

{% block body %}
    <div class="min-h-screen bg-gray-100 p-4 md:p-6">
        <div class="container mx-auto max-w-3xl"> {# Limit width for forms #}

            {# Page Header #}
            <h1 class="text-2xl md:text-3xl font-bold text-gray-800 mb-6">
                {{ page_title|default('Gérer l\'Événement') }}
            </h1>

            {# Flash Messages #}
            {% include 'partials/_flash_messages.html.twig' ignore missing %}

            {# Form #}
            <div class="bg-white p-6 rounded-lg shadow">
                {# Use method="POST" explicitly if needed, though form_start defaults to it #}
                {{ form_start(form, {'attr': {'id': 'event-form'}}) }}

                {# Display general form errors #}
                {{ form_errors(form) }}

                {# --- RENDER FORM FIELDS MANUALLY FOR BUTTON PLACEMENT --- #}
                <div class="space-y-4"> {# Add spacing between fields #}
                    {# Titre #}
                    <div class="mb-3">
                        {{ form_label(form.titre) }}
                        {{ form_widget(form.titre, {'attr': {'class': 'form-control'}}) }}
                        {{ form_errors(form.titre) }}
                    </div>

                    {# Description & AI Button #}
                    <div class="mb-3">
                        <div class="flex justify-between items-center mb-1">
                            {{ form_label(form.description) }}
                            {# Show AI button only on 'new' page if flag is set #}
                            {% if show_ai_button|default(false) %}
                                <button type="button" id="generate-ai-btn" class="button button-ai button-sm">
                                    <i class="fas fa-robot mr-1"></i> Générer avec IA
                                </button>
                            {% endif %}
                        </div>
                        {{ form_widget(form.description, {'attr': {'class': 'form-control', 'rows': 5}}) }}
                        {{ form_errors(form.description) }}
                        <div id="ai-status" class="text-xs mt-1"></div> {# For loading/error messages #}
                    </div>

                    {# State (Gouvernorat) #}
                    <div class="mb-3">
                        {{ form_label(form.state) }}
                        {{ form_widget(form.state, {'attr': {'class': 'form-select'}}) }}
                        {{ form_errors(form.state) }}
                    </div>

                    {# Date Debut #}
                    <div class="mb-3">
                        {{ form_label(form.dateDebut) }}
                        {{ form_widget(form.dateDebut, {'attr': {'class': 'form-control'}}) }}
                        {{ form_errors(form.dateDebut) }}
                    </div>

                    {# Date Fin #}
                    <div class="mb-3">
                        {{ form_label(form.dateFin) }}
                        {{ form_widget(form.dateFin, {'attr': {'class': 'form-control'}}) }}
                        {{ form_errors(form.dateFin) }}
                    </div>

                    {# Min Autonomy #}
                    <div class="mb-3">
                        {{ form_label(form.trottinetteMinAutonomie) }}
                        {{ form_widget(form.trottinetteMinAutonomie, {'attr': {'class': 'form-control'}}) }}
                        {{ form_errors(form.trottinetteMinAutonomie) }}
                    </div>

                    {# Status (Only on Edit) #}
                    {% if form.statut is defined %}
                        <div class="mb-3">
                            {{ form_label(form.statut) }}
                            {{ form_widget(form.statut, {'attr': {'class': 'form-select'}}) }}
                            {{ form_errors(form.statut) }}
                        </div>
                    {% endif %}
                </div>
                {# --- END MANUAL FIELD RENDERING --- #}

                {# Buttons #}
                <div class="mt-6 flex justify-between items-center border-t pt-4">
                    <a href="{{ path('app_admin_events') }}" class="button button-secondary">
                        <i class="fas fa-arrow-left mr-2"></i> Annuler
                    </a>
                    <button type="submit" class="button button-success">
                        <i class="fas fa-save mr-2"></i> {{ button_label|default('Enregistrer') }}
                    </button>
                </div>

                {{ form_end(form) }}
            </div>

        </div> {# End container #}
    </div> {# End page wrapper #}
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const aiButton = document.getElementById('generate-ai-btn');
            const descriptionField = document.getElementById('{{ form.description.vars.id }}'); // Get ID dynamically
            const titreField = document.getElementById('{{ form.titre.vars.id }}');
            const stateField = document.getElementById('{{ form.state.vars.id }}');
            const dateDebutField = document.getElementById('{{ form.dateDebut.vars.id }}');
            const dateFinField = document.getElementById('{{ form.dateFin.vars.id }}');
            const autonomieField = document.getElementById('{{ form.trottinetteMinAutonomie.vars.id }}');
            const aiStatusDiv = document.getElementById('ai-status');

            if (aiButton && descriptionField) {
                aiButton.addEventListener('click', async function() {
                    const description = descriptionField.value;
                    if (!description.trim()) {
                        aiStatusDiv.textContent = 'Veuillez entrer une description.';
                        aiStatusDiv.className = 'text-xs mt-1 text-red-600';
                        return;
                    }

                    // --- Show loading state ---
                    aiButton.disabled = true;
                    aiButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-1"></i> Génération...';
                    aiStatusDiv.textContent = 'Analyse en cours...';
                    aiStatusDiv.className = 'text-xs mt-1 text-blue-600';

                    try {
                        const response = await fetch("{{ path('app_admin_event_generate_details') }}", {
                            method: 'POST',
                            headers: {
                                'Accept': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest', // Optional: Helps backend identify AJAX
                                'Content-Type': 'application/x-www-form-urlencoded', // Required
                            },
                            body: `description=${encodeURIComponent(description)}`
                        });

                        const result = await response.json();

                        if (response.ok && result.success && result.data) {
                            const data = result.data;
                            console.log("AI Data Received:", data); // Debugging

                            // --- Populate fields ---
                            if (data.titre && titreField) titreField.value = data.titre;
                            if (data.state && stateField) {
                                // Important: Set the VALUE of the select element
                                // This assumes the backend correctly mapped the location name
                                // to the Enum *value* (e.g., 'SOUSSE')
                                stateField.value = data.state;
                                if (stateField.value !== data.state) { // Check if value was actually set (option exists)
                                    console.warn(`Could not set state field to '${data.state}'. Option might be missing or mapping failed.`);
                                    aiStatusDiv.textContent += ` (Lieu '${data.state}' non mappé)`; // Append warning
                                    aiStatusDiv.className = 'text-xs mt-1 text-yellow-600';
                                }
                            }
                            if (data.dateDebut && dateDebutField) dateDebutField.value = data.dateDebut;
                            if (data.dateFin && dateFinField) dateFinField.value = data.dateFin;
                            if (data.trottinetteMinAutonomie !== undefined && data.trottinetteMinAutonomie !== null && autonomieField) {
                                autonomieField.value = data.trottinetteMinAutonomie;
                            }

                            aiStatusDiv.textContent = 'Champs pré-remplis par l\'IA.';
                            aiStatusDiv.className = 'text-xs mt-1 text-green-600';

                        } else {
                            // Handle errors reported by the backend
                            console.error("AI Generation Error:", result.message);
                            aiStatusDiv.textContent = `Erreur: ${result.message || 'Impossible de générer les détails.'}`;
                            aiStatusDiv.className = 'text-xs mt-1 text-red-600';
                        }

                    } catch (error) {
                        // Handle network or other fetch errors
                        console.error("Fetch Error:", error);
                        aiStatusDiv.textContent = 'Erreur de communication avec le serveur.';
                        aiStatusDiv.className = 'text-xs mt-1 text-red-600';
                    } finally {
                        // --- Reset button state ---
                        aiButton.disabled = false;
                        aiButton.innerHTML = '<i class="fas fa-robot mr-1"></i> Générer avec IA';
                    }
                });
            } else {
                if (!aiButton) console.error("AI button not found");
                if (!descriptionField) console.error("Description field not found");
            }
        });
    </script>
{% endblock %}