{% extends 'base.html.twig' %}

{% block title %}Événements - TrottiCare{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    {# Ensure Tailwind base styles are loaded via base.html.twig #}
    {# Add any page-specific styles or overrides here #}
    <style>
        /* Basic form input/select styles (reuse/adapt) */
        .form-input, .form-select {
            appearance: none; display: block; width: 100%;
            padding: 0.5rem 0.75rem; font-size: 0.875rem; line-height: 1.5;
            color: #1f2937; background-color: #fff; background-clip: padding-box;
            border: 1px solid #d1d5db; border-radius: 0.375rem;
            transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
        }
        .form-select {
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 0.5rem center; background-repeat: no-repeat;
            background-size: 1.5em 1.5em; padding-right: 2.5rem;
        }
        .form-select-sm {
            padding-top: 0.375rem; padding-bottom: 0.375rem; font-size: 0.75rem;
        }
        .form-input:focus, .form-select:focus {
            outline: none; border-color: #3b82f6;
            box-shadow: 0 0 0 1px #3b82f6; /* ring-1 ring-blue-500 */
        }
        .search-input { padding-left: 2.5rem; }

        /* Button Styles */
        .button { display: inline-flex; align-items: center; justify-content: center; padding: 0.5rem 1rem; border-radius: 0.375rem; font-weight: 500; text-align: center; cursor: pointer; transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out, color 0.2s ease-in-out; border: 1px solid transparent; line-height: 1.25; font-size: 0.875rem; white-space: nowrap; }
        .button-sm { padding: 0.375rem 0.75rem; font-size: 0.75rem; }
        .button-primary { background-color: #3b82f6; color: white; border-color: #3b82f6; } .button-primary:hover { background-color: #2563eb; border-color: #1d4ed8;}
        .button-secondary { background-color: #e5e7eb; color: #374151; border-color: #d1d5db; } .button-secondary:hover { background-color: #d1d5db; border-color: #9ca3af;}
        .button:disabled { opacity: 0.6; cursor: not-allowed; }

        /* KNP Paginator Styles (Tailwind Adaption) */
        .pagination { display: flex; justify-content: center; padding-left: 0; list-style: none; }
        .page-item { margin: 0 0.125rem; }
        .page-item.disabled .page-link, .page-item.disabled span { color: #6b7280; pointer-events: none; background-color: #fff; border-color: #e5e7eb; cursor: not-allowed;}
        .page-item.active .page-link, .page-item.active span { z-index: 10; color: #fff; background-color: #3b82f6; border-color: #3b82f6; }
        .page-link, .page-item span { position: relative; display: block; padding: 0.5rem 0.75rem; line-height: 1.25; color: #3b82f6; background-color: #fff; border: 1px solid #e5e7eb; border-radius: 0.375rem; transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out; }
        .page-link:hover { z-index: 5; color: #2563eb; text-decoration: none; background-color: #f9fafb; border-color: #d1d5db; }

        /* KNP Sortable Link Styles (not used on client page, but keep for consistency if needed elsewhere) */
        th a.sortable { color: #4b5563; text-decoration: none; display: inline-flex; align-items: center; gap: 0.25rem; white-space: nowrap; }
        th a.sortable:hover { color: #1f2937; }
        th a.sortable .fas { color: #9ca3af; font-size: 0.8em; }
        th a.sortable.asc .fa-sort-up, th a.sortable.desc .fa-sort-down { color: #3b82f6; }
        th a.sortable .fa-sort { color: #9ca3af; }

        /* FontAwesome (if used) */
        .fas { display: inline-block; font-style: normal; font-variant: normal; text-rendering: auto; -webkit-font-smoothing: antialiased; font-family: "Font Awesome 6 Free"; font-weight: 900; }
        .fa-search:before { content: "\f002"; }
        .fa-info-circle:before { content: "\f05a"; }
        .mr-2 { margin-right: 0.5rem; }
    </style>
{% endblock %}


{% block body %}
    <div class="min-h-screen bg-gray-100 p-4 md:p-6 lg:p-8">
        <div class="container mx-auto max-w-7xl">

            <h1 class="text-3xl font-bold text-gray-900 mb-6 text-center md:text-left">
                Découvrez nos Événements
            </h1>

            {% include 'partials/_flash_messages.html.twig' ignore missing %}

            {# Filter and Sort Controls Card #}
            <div class="mb-8 p-4 bg-white rounded-lg shadow-md border border-gray-200">
                <form method="get" action="{{ path('client_event_index') }}" class="filter-form grid gap-4 items-end">

                    {# Search Input #}
                    <div class="md:col-span-2 lg:col-span-2"> {# Adjust span based on final layout #}
                        <label for="search_id" class="block text-xs font-medium text-gray-600">Rechercher</label>
                        <div class="relative">
                            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                <svg class="h-4 w-4 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"> <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" /> </svg>
                            </div>
                            <input type="search" id="search_id" name="search" class="form-input search-input w-full text-sm" placeholder="Titre, description, lieu..." value="{{ search_term|default('') }}">
                        </div>
                    </div>

                    {# Sort Field Dropdown #}
                    <div>
                        <label for="sort_field_id" class="block text-xs font-medium text-gray-600">Trier par</label>
                        <select name="sort" id="sort_field_id" class="form-select text-sm w-full" onchange="this.form.submit()">
                            {% for label, dql_path in allowed_sorts_map %}
                                {# VALUE is the DQL path, TEXT is the user-friendly label #}
                                <option value="{{ dql_path }}" {{ dql_path == current_sort_field ? 'selected' : '' }}>
                                    {{ label }}
                                </option>
                            {% endfor %}
                        </select>
                    </div>

                    {# Sort Direction Dropdown #}
                    <div>
                        <label for="sort_direction_id" class="block text-xs font-medium text-gray-600">Ordre</label>
                        <select name="direction" id="sort_direction_id" class="form-select text-sm w-full" onchange="this.form.submit()">
                            <option value="asc" {{ current_direction == 'asc' ? 'selected' : '' }}>Croissant</option>
                            <option value="desc" {{ current_direction == 'desc' ? 'selected' : '' }}>Décroissant</option>
                        </select>
                    </div>

                    {# Filter Buttons (Links) #}
                    <div class="flex flex-col items-start md:self-end">
                        <label class="block text-xs font-medium text-gray-600 mb-1">Filtrer Dates</label>
                        <div class="flex gap-2 flex-wrap w-full">
                            {% set filter_buttons = {'all':'Tous', 'upcoming':'À venir', 'past':'Passés'} %}
                            {% set current_filter_param = app.request.query.get('filter', 'all') %}
                            {% for key, label in filter_buttons %}
                                {# Merge ALL current query parameters EXCEPT page, and then add the new filter #}
                                <a href="{{ path('client_event_index', app.request.query.all|merge({'filter': key, 'page': 1})) }}"
                                   class="button button-sm {{ current_filter_param == key ? 'button-primary' : 'button-secondary' }} flex-grow sm:flex-grow-0">
                                    {{ label }}
                                </a>
                            {% endfor %}
                        </div>
                    </div>

                    {# Hidden inputs to preserve state when changing sort/direction via form submit #}
                    <input type="hidden" name="filter" value="{{ current_filter|default('all') }}">
                    <input type="hidden" name="limit" value="{{ currentLimit|default(12) }}"> {# Keep current limit #}

                </form>
            </div>


            {# Results Count #}
            {% if pagination is defined and pagination.getTotalItemCount > 0 %}
                <div class="text-sm text-gray-600 mb-4">
                    {% set totalDbItems = pagination.getTotalItemCount|default(0) %}
                    Environ {{ totalDbItems }} événement{{ totalDbItems > 1 ? 's correspondent' : ' correspond' }} aux critères de base.
                    {# Removed note about PHP filtering accuracy as it's not used here #}
                </div>
            {% endif %}

            {# Event Grid #}
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 events-grid">
                {# Check the PREPARED data array 'events_data' #}
                {% if events_data is not empty %}
                    {% for event_data in events_data %}
                        {% include 'event/_event_card.html.twig' with {
                            'event_data': event_data
                        } %}
                    {% endfor %}
                {% else %}
                    {# No results message #}
                    <div class="col-span-full text-center py-16 px-6 text-gray-500 bg-white rounded-lg shadow-md border border-gray-200">
                        <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                        <h3 class="mt-2 text-sm font-medium text-gray-900">Aucun événement trouvé</h3>
                        <p class="mt-1 text-sm text-gray-500">Essayez d'ajuster vos filtres ou revenez plus tard.</p>
                        {# Check form filter values or request params #}
                        {% set is_filtered = app.request.query.get('search') is not empty
                            or app.request.query.get('filter', 'all') != 'all'
                            or app.request.query.get('sort', 'dateDebut') != 'dateDebut'
                            or app.request.query.get('direction', 'desc') != 'desc'
                        %}
                        {% if is_filtered %}
                            <div class="mt-6">
                                <a href="{{ path('client_event_index') }}" class="button button-sm button-secondary">
                                    Réinitialiser les filtres et tris
                                </a>
                            </div>
                        {% endif %}
                    </div>
                {% endif %}
            </div>

            {# Pagination Controls Container #}
            {% if pagination is defined and pagination.getTotalItemCount > 0 %}
                <div class="pagination-container mt-8">
                    <div> {# Links div #}
                        {% if pagination.pageCount > 1 %}
                            {{ knp_pagination_render(pagination) }} {# Uses configured Tailwind template #}
                        {% endif %}
                    </div>
                    <div class="pagination-controls"> {# Summary & Limit div #}
                        <span> {# Item count text #}
                            {% set totalItems = pagination.getTotalItemCount|default(0) %}
                            {% if totalItems > 0 %}
                                {% set firstItem = (pagination.getCurrentPageNumber() - 1) * pagination.getItemNumberPerPage() + 1 %}
                                {# Use the count of items prepared for the view for 'lastItem' #}
                                {% set lastItem = firstItem + events_data|length - 1 %}
                                Affichage de {{ firstItem }} à {{ lastItem }} sur {{ totalItems }}
                            {% endif %}
                     </span>
                        <div class="inline-flex items-center"> {# Limit Selector #}
                            <label for="itemsPerPageSelect" class="whitespace-nowrap">par page:</label>
                            <select id="itemsPerPageSelect" class="form-select limit-select">
                                {% for limitOption in allowedLimits %}
                                    <option value="{{ limitOption }}" {{ limitOption == currentLimit ? 'selected' : '' }}>
                                        {{ limitOption }}
                                    </option>
                                {% endfor %}
                            </select>
                        </div>
                    </div>
                </div>
                {# Removed note about pagination accuracy as PHP filter isn't used #}
            {% endif %}


        </div> {# End Container #}
    </div> {# End Page Wrapper #}
{% endblock %}
{% block javascripts %}
    {{ parent() }}
    {# --- JavaScript for Limit Selector --- #}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const selectElement = document.getElementById('itemsPerPageSelect');
            if (selectElement) {
                selectElement.addEventListener('change', function() {
                    const newLimit = this.value;
                    const currentUrl = new URL(window.location.href);
                    const params = currentUrl.searchParams;
                    params.set('limit', newLimit);
                    params.set('page', "1"); // <-- CORRECTED: Use string '1'
                    currentUrl.search = params.toString();
                    window.location.href = currentUrl.toString();
                });
            }
            // Optional: JS to submit filter form on select change
            // document.querySelectorAll('.filter-form .form-select').forEach(select => {
            //     select.addEventListener('change', () => {
            //         select.closest('form').submit();
            //     });
            // });
        });
    </script>
{% endblock %}