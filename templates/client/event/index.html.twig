{# templates/client/event/index.html.twig #}
{% extends 'base.html.twig' %}

{% block title %}Événements - TrottiCare{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    {# Ensure Tailwind base styles are loaded via base.html.twig #}
    {# Add any page-specific styles or overrides here #}
    <style>
        /* Basic form input/select styles (reuse/adapt) */
        .form-input, .form-select {
            appearance: none; display: block; width: 100%;
            padding: 0.5rem 0.75rem; font-size: 0.875rem; line-height: 1.5;
            color: #1f2937; background-color: #fff; background-clip: padding-box;
            border: 1px solid #d1d5db; border-radius: 0.375rem;
            transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
        }
        .form-select {
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 0.5rem center; background-repeat: no-repeat;
            background-size: 1.5em 1.5em; padding-right: 2.5rem;
        }
        .form-select-sm {
            padding-top: 0.375rem; padding-bottom: 0.375rem; font-size: 0.75rem;
        }
        .form-input:focus, .form-select:focus {
            outline: none; border-color: #3b82f6;
            box-shadow: 0 0 0 1px #3b82f6; /* ring-1 ring-blue-500 */
        }
        .search-input { padding-left: 2.5rem; }

        /* Button Styles */
        .button { display: inline-flex; align-items: center; justify-content: center; padding: 0.5rem 1rem; border-radius: 0.375rem; font-weight: 500; text-align: center; cursor: pointer; transition: background-color 0.2s ease-in-out, border-color 0.2s ease-in-out, color 0.2s ease-in-out; border: 1px solid transparent; line-height: 1.25; font-size: 0.875rem; white-space: nowrap; }
        .button-sm { padding: 0.375rem 0.75rem; font-size: 0.75rem; }
        .button-primary { background-color: #3b82f6; color: white; border-color: #3b82f6; } .button-primary:hover { background-color: #2563eb; border-color: #1d4ed8;}
        .button-secondary { background-color: #e5e7eb; color: #374151; border-color: #d1d5db; } .button-secondary:hover { background-color: #d1d5db; border-color: #9ca3af;}
        .button:disabled { opacity: 0.6; cursor: not-allowed; }

        /* KNP Paginator Styles (Tailwind Adaption) */
        .pagination { display: flex; justify-content: center; padding-left: 0; list-style: none; }
        .page-item { margin: 0 0.125rem; }
        .page-item.disabled .page-link, .page-item.disabled span { color: #6b7280; pointer-events: none; background-color: #fff; border-color: #e5e7eb; cursor: not-allowed;}
        .page-item.active .page-link, .page-item.active span { z-index: 10; color: #fff; background-color: #3b82f6; border-color: #3b82f6; }
        .page-link, .page-item span { position: relative; display: block; padding: 0.5rem 0.75rem; line-height: 1.25; color: #3b82f6; background-color: #fff; border: 1px solid #e5e7eb; border-radius: 0.375rem; transition: color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out; }
        .page-link:hover { z-index: 5; color: #2563eb; text-decoration: none; background-color: #f9fafb; border-color: #d1d5db; }

        /* KNP Sortable Link Styles (not used on client page, but keep for consistency if needed elsewhere) */
        th a.sortable { color: #4b5563; text-decoration: none; display: inline-flex; align-items: center; gap: 0.25rem; white-space: nowrap; }
        th a.sortable:hover { color: #1f2937; }
        th a.sortable .fas { color: #9ca3af; font-size: 0.8em; }
        th a.sortable.asc .fa-sort-up, th a.sortable.desc .fa-sort-down { color: #3b82f6; }
        th a.sortable .fa-sort { color: #9ca3af; }

        /* FontAwesome (if used) */
        .fas { display: inline-block; font-style: normal; font-variant: normal; text-rendering: auto; -webkit-font-smoothing: antialiased; font-family: "Font Awesome 6 Free"; font-weight: 900; }
        .fa-search:before { content: "\f002"; }
        .fa-info-circle:before { content: "\f05a"; }
        .mr-2 { margin-right: 0.5rem; }
    </style>
{% endblock %}

{% block body %}
<div class="min-h-screen bg-gray-100 p-4 md:p-6 lg:p-8"> {# Use page-content if extending a flex layout base #}
    <div class="container mx-auto max-w-7xl"> {# Use Tailwind container and max-width #}

        {# Header #}
        <h1 class="text-3xl font-bold text-gray-900 mb-6 text-center md:text-left">
            Découvrez nos Événements
        </h1>

        {# Flash Messages #}
        {% include 'partials/_flash_messages.html.twig' ignore missing %}

        {# Filter and Search Controls Card #}
        <div class="mb-8 p-4 bg-white rounded-lg shadow-md border border-gray-200">
            <form method="get" action="{{ path('client_event_index') }}" class="flex flex-col md:flex-row gap-4 items-center">
                {# Search Input #}
                <div class="relative flex-grow w-full md:w-auto">
                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                        <svg class="h-5 w-5 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true"> <path fill-rule="evenodd" d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z" clip-rule="evenodd" /> </svg>
                    </div>
                    <input type="search"
                           name="search"
                           class="form-input search-input w-full text-sm"
                           placeholder="Rechercher..."
                           value="{{ search_term|default('') }}">
                    {# Hidden input to keep filter value during search submit #}
                    <input type="hidden" name="filter" value="{{ current_filter|default('all') }}">
                </div>

                {# Filter Buttons Group #}
                <div class="flex gap-2 flex-wrap items-center justify-center md:justify-start">
                    <span class="text-sm font-medium mr-2 shrink-0 hidden md:inline">Filtrer:</span>
                    {# Use links for filters to preserve other params easily #}
                    {% set filter_buttons = {'all':'Tous', 'upcoming':'À venir', 'past':'Passés'} %}
                    {% set current_filter_param = app.request.query.get('filter', 'all') %}
                    {% for key, label in filter_buttons %}
                        <a href="{{ path('client_event_index', app.request.query.all|merge({'filter': key})) }}"
                           class="button button-sm {{ current_filter_param == key ? 'button-primary' : 'button-secondary' }}">
                            {{ label }}
                        </a>
                    {% endfor %}
                </div>
                {# Optional: Add a dedicated search submit button if needed #}
                {# <button type="submit" class="button button-sm button-primary shrink-0">Rechercher</button> #}
            </form>
            {# Optional: Add Limit/Sort controls similar to admin if desired #}
        </div>


        {# Event Grid #}
        {% if pagination is defined and pagination.getTotalItemCount > 0 %}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 events-grid">
            {# Loop directly over the pagination object #}
            {% for event in pagination %}
            {# Get the user's participation status for *this* specific event #}
            {% set user_status_for_this_event = userParticipationMap[event.id] ?? null %}

            {# Include the event card partial #}
            {# Ensure _event_card.html.twig expects 'event' and 'user_participation_status' #}
            {% include 'client/event/_event_card.html.twig' with {
            'event': event,
            'user_participation_status': user_status_for_this_event,
            'location': event.state ? event.state.label : '-',
            'duration': null
            } %}
            {% endfor %}
        </div>
        {% else %}
        <div class="text-center py-16 px-6 text-gray-500 bg-white rounded-lg shadow-md border border-gray-200">
            <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
            </svg>
            <h3 class="mt-2 text-sm font-medium text-gray-900">Aucun événement trouvé</h3>
            <p class="mt-1 text-sm text-gray-500">Essayez d'ajuster vos filtres ou revenez plus tard.</p>
            {% if app.request.query.get('search') != '' or app.request.query.get('filter') != 'all' %}
            <div class="mt-6">
                <a href="{{ path('client_event_index') }}" class="button button-sm button-secondary">
                        Voir tous les événements
                    </a>
                </div>
                {% endif %}
            </div>
        {% endif %}


        {# --- Pagination Controls --- #}
        <div class="pagination-controls text-center mt-8">
            {# Render the KNP pagination links if pagination is defined and needed #}
            {% if pagination is defined and pagination.pageCount > 1 %}
                 {{ knp_pagination_render(pagination) }}
            {% endif %}

            {# Optional item count display #}
            <div class="text-sm text-gray-600 mt-2">
                {% if pagination is defined and pagination.getTotalItemCount > 0 %}
                    {% set firstItem = (pagination.getCurrentPageNumber() - 1) * pagination.getItemNumberPerPage() + 1 %}
                    {% set lastItem = firstItem + pagination.count - 1 %}
                    Affichage de {{ firstItem }} à {{ lastItem }} sur {{ pagination.getTotalItemCount }} événement{{ pagination.getTotalItemCount > 1 ? 's' : '' }}.
                {% endif %}
            </div>
        </div>

    </div>
</div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    {# --- Optional JS for better UX --- #}
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Example: Trigger form submit on search input clear (if using type="search")
            const searchInput = document.querySelector('input[type="search"][name="search"]');
            if (searchInput) {
                searchInput.addEventListener('search', function(event) {
                    // If the search box is cleared, submit the form to potentially reset search
                    if (searchInput.value === '') {
                        searchInput.closest('form').submit();
                    }
                });
            }
        });
    </script>
{% endblock %}